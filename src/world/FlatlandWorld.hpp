// FlatlandWorld.hpp
#pragma once

#include "shared/core/World.hpp"

#include <vector>
#include <memory>


namespace rel
{

class FlatlandEntity;


/////////////////////////////////////////////
/// \brief The FlatlandWorld class
///
/// \author Logan Barnes
/////////////////////////////////////////////
class FlatlandWorld : public shs::World
{

public:

  ///////////////////////////////////////////////////////////////
  /// \brief FlatlandWorld
  ///////////////////////////////////////////////////////////////
  FlatlandWorld( );


  ///////////////////////////////////////////////////////////////
  /// \brief ~FlatlandWorld
  ///////////////////////////////////////////////////////////////
  ~FlatlandWorld( );


  ///////////////////////////////////////////////////////////////
  /// \brief update
  ///////////////////////////////////////////////////////////////
  virtual
  void update (
               const double worldTime, ///< update to this time
               const double timestep   ///< interval since last update
               ) final;


  ///////////////////////////////////////////////////////////////
  /// \brief addEntity
  /// \param upEntity
  ///////////////////////////////////////////////////////////////
  void addEntity ( std::unique_ptr< FlatlandEntity > upEntity );


  ///////////////////////////////////////////////////////////////
  /// \brief getEntities
  /// \return
  ///////////////////////////////////////////////////////////////
  const std::vector< std::unique_ptr< FlatlandEntity > > &getEntities ( ) const;


private:

  float timePosition_;
  std::vector< std::unique_ptr< FlatlandEntity > > entities_;

};


} // namespace rel
