language: c++

os:
  - linux

dist: trusty

addons:
  apt:
    packages:
      - libglew-dev
      - xpra

before_install:
  - sudo add-apt-repository -y ppa:oibaf/graphics-drivers
  - sudo apt-get update -qq -y
  - export DEBIAN_FRONTEND=noninteractive
  - sudo apt-get -yq --force-yes install libgl1-mesa-dev libgl1-mesa-glx mesa-common-dev libglapi-mesa libgbm1 libgl1-mesa-dri libxatracker-dev xvfb
#  - sudo apt-get -yq --force-yes install xserver-xorg-video-vmware-lts-trusty
#  - sudo apt-get -yq --force-yes install git-core
#  - sudo apt-get -yq --force-yes install automake libtool libpthread-stubs0-dev
#  - sudo apt-get -yq --force-yes install xserver-xorg-dev x11proto-xinerama-dev libx11-xcb-dev
#  - sudo apt-get -yq --force-yes install libxcb-glx0-dev libxrender-dev
#  - sudo apt-get -y install linux-headers-$(uname -r) xutils-dev
#  - sudo apt-get -yq --force-yes build-dep libgl1-mesa-dri libxcb-glx0-dev
#  - pip install --user mako
#  - export TOP=$PWD
#  - git clone git://anongit.freedesktop.org/git/mesa/mesa
#  - git clone git://anongit.freedesktop.org/git/mesa/vmwgfx
#  - git clone git://anongit.freedesktop.org/git/mesa/drm
#  - git clone git://anongit.freedesktop.org/git/xorg/driver/xf86-video-vmware
#  - export LIBDIR=/usr/lib/x86_64-linux-gnu
#  - cd $TOP/drm
#  - ./autogen.sh --prefix=/usr --libdir=${LIBDIR}
#  - make
#  - sudo make install
#  - cd $TOP/mesa
#  - ./autogen.sh --prefix=/usr --libdir=${LIBDIR} --with-gallium-drivers=svga,swrast --enable-xa --disable-dri --enable-xlib-glx --with-llvm-prefix=/usr/local/bin
#  - ./autogen.sh --prefix=/usr --libdir=${LIBDIR} --with-gallium-drivers=svga --with-dri-drivers=swrast --enable-xa --disable-dri3 --enable-glx-tls --with-llvm-prefix=/usr/local/bin
#  - make
#  - sudo make install
#  - cd $TOP/xf86-video-vmware
#  - ./autogen.sh --prefix=/usr --libdir=${LIBDIR}
#  - make
#  - sudo make install
#  - cd $TOP/vmwgfx
#  - make
#  - sudo make install
#  - sudo depmod -a
#  - sudo update-initramfs -u
#  - echo vmwgfx | sudo tee -a /etc/modules
#  - find /lib/modules -name vmwgfx.ko -exec ls -l '{}' \;
#  - sudo modprobe vmwgfx
#  - cd $TOP
before_script:
  - export DISPLAY=:99
  - export LIBGL_ALWAYS_SOFTWARE=1
#  - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render;
  - xpra --xvfb="Xorg +extension GLX +extension RANDR +extension RENDER -config `pwd`/res/config/dummy.xorg.conf -logfile ${HOME}/.xpra/xorg.log"  start :99
  - sleep 3
  - LIBGL_ALWAYS_SOFTWARE=1 glewinfo
  - glewinfo
  - cat ${HOME}/.xpra/xorg.log
#  - dmesg | grep vmw
script:
  echo "done";
  # - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
  # - LIBGL_ALWAYS_SOFTWARE=1 julia --check-bounds=yes --depwarn=no -e 'Pkg.clone(pwd()); Pkg.build("GLFW"); Pkg.test("GLFW"; coverage=true)'

# language: c++

# branches:
#   only:
#     - master

# dist: trusty

# addons:
#   apt:
#     sources:
#       - llvm-toolchain-trusty-3.9
#     packages:
#       - clang-3.9
#       - libc++-dev
#       - libglew-dev
#       - freeglut3-dev
#       - libxi-dev
#       - libxmu-dev
#       - xserver-xorg-video-dummy
#       - xpra
#       - xorg-dev
#       - opencl-headers
#       - libgl1-mesa-dev
#       - libxcursor-dev
#       - libpulse-dev
#       - libxinerama-dev
#       - libxrandr-dev
#       - libxv-dev
#       - libasound2-dev
#       - libudev-dev
#       - mesa-utils
#       - libgl1-mesa-glx

# # env:
#   # global:
#     # - TERM: dumb
#     # - MESA_DEBUG: 1
#     # - LIBGL_DEBUG: 1
#     # - EGL_LOG_LEVEL: debug


# # matrix:
# #   include:

# #     # Xcode 8
# #     - os: osx
# #       env: SHARED=OFF
# #       osx_image: xcode8

# #     # clang 3.9
# #     - os: linux
# #       env: LLVM=3.9 SHARED=OFF
# #       compiler: "clang-3.9"

# before_install:
#   # ############################################################################
#   # # Update OS X homebrew
#   # ############################################################################
#   # - |
#   #   if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
#   #     brew update
#   #   fi

#   # ############################################################################
#   # # Set build type to default Release value
#   # ############################################################################
#   # - if [[ "${BUILD_TYPE}" == "" ]]; then BUILD_TYPE=Release; fi

#   # ############################################################################
#   # # Set up default compiler versions and corresponding environment variables
#   # ############################################################################
#   # - if [[ "${LLVM}" == "default" ]]; then LLVM=3.9; fi
#   # - |
#   #   if [[ "${LLVM}" != "" ]]; then
#   #     export CXX=clang++-${LLVM}
#   #     export CXXFLAGS=-stdlib=libc++
#   #   fi
#   # - |
#   #   if [[ "${GCC}" != "" ]]; then
#   #     export CXX=g++-${GCC}
#   #   fi
#   # - ${CXX} --version

#   ############################################################################
#   # Set up headless rendering
#   ############################################################################
#   # # - sudo apt-get purge fglrx
#   # - sudo add-apt-repository -y ppa:oibaf/graphics-drivers
#   # - sudo apt-get update -qq -y
#   # - sudo apt-get dist-upgrade -qq -y
#   # # - sudo apt-get -yq --force-yes install libgl1-mesa-dev libgl1-mesa-glx mesa-common-dev libglapi-mesa libgbm1 libgl1-mesa-dri libxatracker-dev xvfb
#   # - export DISPLAY=:99
#   # - export LIBGL_ALWAYS_SOFTWARE=1
#   # - export LIBGL_PROFILE_CORE=1
#   # # - export GALLIUM_DRIVER=\"softpipe\"
#   # # - cat /etc/init.d/xvfb
#   # # - sh -e /etc/init.d/xvfb start
#   # # - sleep 2
#   # # - xpra --xvfb="Xorg +extension GLX +extension RANDR +extension RENDER -config `pwd`/res/config/dummy.xorg.conf -logfile ${HOME}/.xpra/xorg.log"  start :99
#   # # - sudo apt-get install -qq --force-yes mesa-utils libgl1-mesa-swx11 libgl1-mesa-swx11-dev xvfb
#   # - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render
#   # - sleep 3
#   # - glxinfo -display :99
#   - sudo add-apt-repository -y ppa:oibaf/graphics-drivers
#   - sudo apt-get update -qq -y
#   - export DEBIAN_FRONTEND=noninteractive
#   - sudo apt-get -yq --force-yes install libgl1-mesa-dev libgl1-mesa-glx mesa-common-dev libglapi-mesa libgbm1 libgl1-mesa-dri libxatracker-dev xvfb

# # install:
# #   ############################################################################
# #   # All compiled dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
# #   ############################################################################
# #   - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
# #   - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

# #   ############################################################################
# #   # Install a recent CMake
# #   ############################################################################
# #   - |
# #     if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
# #       CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
# #       mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
# #       export PATH=${DEPS_DIR}/cmake/bin:${PATH}
# #     else
# #       brew upgrade cmake || brew install cmake
# #     fi
# #   - cmake --version

# before_script:
#   - export DISPLAY=:99
#   - export LIBGL_ALWAYS_SOFTWARE=1
#   - xpra --xvfb="Xorg +extension GLX +extension RANDR +extension RENDER -config `pwd`/res/config/dummy.xorg.conf -logfile ${HOME}/.xpra/xorg.log"  start :99
#   - sleep 3
#   - LIBGL_ALWAYS_SOFTWARE=1 glxinfo
#   - glxinfo
#   - cat ${HOME}/.xpra/xorg.log

# script:
#   ############################################################################
#   # Build project and run tests
#   ############################################################################
#   - cd ${TRAVIS_BUILD_DIR}/run
#   # - ./unixConfigureAndBuild.sh -sf -t
#   # - testbin/testFlatland

# notifications:
#   on_success: never
#   on_failure: never

